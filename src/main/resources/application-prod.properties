# ===========================================
# PRODUCTION CONFIGURATION FOR RENDER.COM
# ===========================================

spring.application.name=DPMHC-backend
server.port=${PORT:8080}

# ===========================================
# DATABASE CONFIGURATION (Single PostgreSQL)
# ===========================================
# Render provides DATABASE_URL in format: postgresql://user:pass@host:port/db
# Spring needs JDBC format: jdbc:postgresql://host:port/db
# Extract components from DATABASE_URL and reconstruct
spring.datasource.url=jdbc:postgresql://${DB_HOST:${DATABASE_URL:postgresql://localhost:5432/db}}
spring.datasource.username=${DB_USERNAME:user}
spring.datasource.password=${DB_PASSWORD:password}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration for PostgreSQL
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.database=postgresql
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# ===========================================
# REDIS CONFIGURATION (Render Redis)
# ===========================================
spring.data.redis.url=${REDIS_URL}
spring.data.redis.timeout=5000ms
spring.data.redis.lettuce.pool.max-active=20
spring.data.redis.lettuce.pool.max-idle=10
spring.data.redis.lettuce.pool.min-idle=5
spring.data.redis.lettuce.pool.max-wait=-1ms

# Cache settings
spring.cache.type=redis
spring.cache.redis.time-to-live=1800000
spring.cache.redis.cache-null-values=false
spring.cache.redis.key-prefix=socialmedia:
spring.cache.redis.use-key-prefix=true

# ===========================================
# PERFORMANCE OPTIMIZATION (Production-Safe)
# ===========================================
# Disable Hibernate 2nd level cache in production to avoid JCache dependency issues
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false
# spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.jcache.JCacheRegionFactory
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true
spring.jpa.properties.hibernate.query.plan_cache_max_size=2048
spring.jpa.properties.hibernate.jdbc.fetch_size=50
spring.jpa.properties.hibernate.generate_statistics=false

# Connection Pool (HikariCP)
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.leak-detection-threshold=60000

# ===========================================
# SECURITY & JWT
# ===========================================
app.jwt.secret=${JWT_SECRET}
app.jwt.expiration=300000
app.jwt.refresh-expiration=7776000000

# ===========================================
# FILE UPLOAD & CLOUDINARY
# ===========================================
app.upload.max-file-size=52428800
app.upload.allowed-types=image/*,video/*,audio/*,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB
spring.servlet.multipart.enabled=true

cloudinary.cloud_name=${CLOUDINARY_CLOUD_NAME}
cloudinary.api_key=${CLOUDINARY_API_KEY}
cloudinary.api_secret=${CLOUDINARY_API_SECRET}

# ===========================================
# EMAIL CONFIGURATION
# ===========================================
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com
spring.mail.properties.mail.smtp.from=${MAIL_USERNAME}

# ===========================================
# WEBSOCKET CONFIGURATION
# ===========================================
spring.websocket.max-text-message-size=8192
spring.websocket.max-binary-message-size=8192

# ===========================================
# JACKSON CONFIGURATION
# ===========================================
spring.jackson.deserialization.fail-on-unknown-properties=false
spring.jackson.deserialization.accept-empty-string-as-null-object=true

# ===========================================
# PAGINATION
# ===========================================
spring.data.web.pageable.default-page-size=10
spring.data.web.pageable.max-page-size=50
spring.data.web.pageable.page-parameter=page
spring.data.web.pageable.size-parameter=size

# ===========================================
# APPLICATION SPECIFIC
# ===========================================
app.base.url=${APP_BASE_URL:https://your-app.onrender.com}
app.refresh-token.max-per-user=10
app.refresh-token.cleanup-delay=86400000

# ===========================================
# PRODUCTION OPTIMIZATIONS
# ===========================================
# Disable SQL init to prevent conflicts
spring.sql.init.mode=never

# Logging configuration
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=WARN
logging.level.com.example.DPMHC_backend=INFO
logging.level.root=WARN

# Actuator for health checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized
management.health.db.enabled=true
management.health.redis.enabled=true

# Server configuration
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.compression.min-response-size=1024